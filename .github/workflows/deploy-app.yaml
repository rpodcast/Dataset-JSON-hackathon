# Basic example of a GitHub Actions workflow that builds a Shiny app and deploys
# it to GitHub Pages.
#
# The agreed upon contract is:
#
# - Inspect the root directory for package dependencies
# - Install R and the found packages
# - Export the Shiny app directory to `./site`
# - On push events, deploy the exported app to GitHub Pages
#
# If this contract is not met or could be easily improved for others,
# please open a new Issue https://github.com/posit-dev/r-shinylive/
#
# The _magic_ of this workflow is in the `shinylive::export()` function, which
# creates a static version of the Shiny app into the folder `./site`.
# The exported app folder is then uploaded and deployed to GitHub Pages.
#
# When deploying to GitHub Pages, be sure to have the appropriate write
# permissions for your token (`pages` and `id-token`).

# Adapted from the r-shinylive GH action for deploying apps: https://github.com/posit-dev/r-shinylive/blob/actions-v1/.github/workflows/deploy-app.yaml
# Modified to install packages with the Nix package manager

name: Deploy app

on:
  workflow_call:
    inputs:
      cache-version:
        type: string
        default: "1"
        required: false
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: "write"
      contents: "read"
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          logger: pretty
          log-directives: nix_installer=trace
          backtrace: full

      - name: Nix cache
        uses: DeterminateSystems/flakehub-cache-action@main

      - name: Build development environment
        run: |
          nix-build

      - name: Build site
        run: nix-shell --run "Rscript -e \"source('export_to_shinylive.R')\""

      - name: Upload site artifact
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-pages-artifact@v3
        with:
          path: "site"
  
  deploy:
    if: github.ref == 'refs/heads/master'
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
